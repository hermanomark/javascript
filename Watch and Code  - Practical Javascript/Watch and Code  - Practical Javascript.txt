Practical javascript by Watch and code

I. Introduction.
Practical Javascript - Learning real world skills.

We're gonna build a todo list!
Most of the web application are just like a todo list. e.g. facebook, twiiter, slack etc.
The application will be an ugly todolist because to make it beautiful we're gonna need to learn some css.
5 main features:
1. Ability to create an item
2. Ability to toggle an single item, like marking it for complete or reset it again.
3. Ability to toggle everything at once
4. Ability to edit an item
5. Ability to delete an item

II. Support 
Joined their facebook group - (https://www.facebook.com/groups/514043678767094/about/)

III. Tools 
Track your progress
Get google chrome
Get plunker - just sign up

IV. Version 1 - Arrays
Requirements - make a requirement to your application. It is use in real world. Break it down large task to little tiny pieces.
e.g.
1. It should have a place to store todos
2. It should have a way to display todos
3. It should have a way to add todos
4. It should have a way to change todos
5. It should have a way to delete a todo

Go to chrome, inspect and go to console

> it should have a place to store todos
- Create an array and array is a list.
var todos = ['item 1', 'item 2', 'item 3']

> It should have a way to display todos
- displaying in console.
console.log("Todo lists: " + todos);
=> Todo lists: item 1, item 2, item 3

> It should have a way to add todos
- using the push method.
todos.push("item 4");
=> ["item 4"];
console.log("Todo lists: " + todos);
=> Todo lists: item 1, item 2, item 3, item 4

> It should have a way to change todos
- displaying a todo by its index and assigining it to a new value.
todos[0]
todos[0] = "item 1 updated";
console.log("Todo lists: " + todos);
=> Todo lists: item 1 updated, item 2, item 3, item 4

> It should have a way to delete a todo
todos.splice(0, 1) //note: 1st number is the position and second number is how many
console.log("Todo lists: " + todos); 
=> Todo lists: item 2, item 3, item 4

V. Version 2 - Functions
Functions are just recipe:
  makeTurkeySandwich
    Get one slice of bread.
    Add turkey.
    Put a slice of bread on top.

Structure of function:
function makeTurkeySandwich() {
  //below is not really a js code
  Get one slice of bread;
  Add turkey;
  Put a slice of bread on top;
}

Running a function:
makeTurkeySandwich();

Customizing function: 
  makeSandWith _____
    Get one slice of bread.
    Add _____.
    Put a slice of bread on top.

function makeSandwichWith(filling) { 
  Get one slice of bread;
  Add filling;
  Put a slice of bread on top;
}
Note: the things inside the functions are called parameters

makeSandwichWith _ham_
makeSandwichWith('ham');
Note: the things you put when you use the function are called arguements

console.log(makeSandwichWith(ham));

More on customizing functions:
function sayHiTo(person) {
  console.log('Hi' + person);
}

sayHiTo('mark');
=> Hi mark

Requirements:
1. It should have a function to display todos
2. It should have a function to add todos
3. It should have a function to change todos
4. It should have a function to delete a todos

> It should have a function to display todos
var todos = ['item 1', 'item 2', 'item 3'];
function displayTodos() {
  console.log('My todos: ' + todos);
}

displayTodos();
=> My todos: item 1, item 2, item 3

> It should have a function to add todos
function addTodo(todo) {
  todos.push(todo);
  displayTodos();
}

addTodo('item 4');
=> My todos: item 1, item 2, item 3, item 4

> It should have a function to change todos
function changeTodo(position, newValue) {
  todos[position] = newValue;
  displayTodos();
}

changeTodo(0, "Changed");
=> My todos: Changed, item 2, item 3, item 4

> It should have a function to delete a todos
function deleteTodo(position) {
  todos.splice(position, 1);
  displayTodos();
}

deleteTodo(3);
=> My todos: Changed, item 2, item 3

ES6 version:

let todos = ['item 1', 'item 2', 'item 3'];
const displayTodos = () => {
  console.log(`My todos` ${todos}`)
}

const addTodo = (todo) => {
  todos.push(todo);
  displayTodos();
}

const changeTodo = (position, newValue) => {
  todos[position] = newValue;
  displayTodos();
}

const deleteTodo = (position) => {
  todos.splice(position, 1);
  displayTodos();
}

VI. Interlude - Functions and Variables
var myName = 'Gordon';

function sayName() {
  var secret = 'watchandcode'
  console.log(myName);
}

sayName(); // will work
console.log(secret); // will not work

If you're inside of a function, you can look out and see data, but the opposite isn't true. If you're outside, you can't look in.

Circles and Arrows - To visualize to avoid referencing errors, draw circle in a function then write an arrow from displaying output to the variable. If displaying output(console.log()) is referencing inside the circle that's a referencing error.

Scope - variable visibility, what viariables you can see at that point.

VII. Version 3 - Objects
Objects to group related data and functions together.

var myComputer = { 
  operatingSystem: 'mac',
  screenSize: '15 inches',
  purchaseYear: '2011' 
};

myComputer
=> operatingSystem: 'mac',
  screenSize: '15 inches',
  purchaseYear: '2011' 

myComputer.operatingSystem
=> 'mac'

myComputer.screenSize
=> '15 inches'

Objects and functions:
method - function on an object
var gordon = {
  name: 'Gordon',
  sayName: function() { 
    console.log(this.name); // refering to entire object
  }
}
gordon.sayName();

=> 'Gordon';

Plunker:
Sign up for plunker: https://plnkr.co

v3 Requirements
- We wanna to put everything so far in an object
1. It should store the todos array on a object
2. It should have displayTodo method
3. It should have an addTodo method
4. It should have a changeTodo method
5. It should have a deleteTodo method

>  It should store the todos array on a object
var todoList = {
  todos: ['item 1', 'item 2', 'item 3']
};

if you do this on plunker: Open plunker inspect element, on dropdown select plunkerpreviewtag hit clear console.

todoList;
=> {todos: Array(3)} //you can expand this output

>  It should have displayTodo method
var todoList = {
  todos: ['item 1', 'item 2', 'item 3'],
  displayTodos: function() {
    console.log('My todos ' + this.todos); // this keyword is referencing the entire object
  }
};

todoList.displayTodos();

> It should have an addTodo method
> It should have a changeTodo method
> It should have a deleteTodo method

var todoList = {
  todos: ['item 1', 'item 2', 'item 3'],
  displayTodos: function() {
    console.log('My todos ' + this.todos);
  },
  addTodo: function(todo) {
    this.todos.push(todo);
    this.displayTodos();
  },
  changeTodo: function(position, newValue) {
    this.todos[position] = newValue;
    this.displayTodos();
  },
  deleteTodo: function(position) {
    this.todos.splice(position, 1);
    this.displayTodos();
  }
};

todoList.addTodo('item 4');
=> My todos: item 1, item 2, item 3, item 4
todoList.changeTodo(3, changed);
=> My todos: item 1, item 2, item 3, changed
todoList.deleteTodo(3);
=> My todos: item 1, item 2, item 3

VIII. Success is the process
- Don't compare yourself to other programmers
- Copy others programmers process
- Mind the things you can control
- Being great at asking questions
- Developer must be great at asking questions: https://medium.com/@gordon_zhu/how-to-be-great-at-asking-questions-e37be04d0603

IX. Version 4 - Booleans
- Booleans representation of true and false.

Requirements:
1. todoList.addTodo should add objects
2. todoList.changeTodo should change the todoText property
3. todoList.togleCompleted should change the completed property

> todoList.addTodo should add objects
 addTodo: function(todoText) { //addTodo('hi')
    this.todos.push({
     todoText: todoText, // this will be hi
     completed: false
    });
    this.displayTodos();

>  todoList.changeTodo should change the todoText property
  changeTodo: function(position, newValue) {
    this.todos[position].todoText = newValue;
    this.displayTodos();

>  todoList.togleCompleted should change the completed property
    toggleCompleted: function(position) {
      var todo = this.todos[position];
      todo.completed = !todo.completed
      this.displayTodos();
    }

Code should look like this: 

var todoList = {
  todos: [],
  displayTodos: function() {
    console.log('My todos ' + this.todos);
  },
  addTodo: function(todoText) { //addTodo('hi')
    this.todos.push({
     todoText: todoText, // this will be hi
     completed: false
    });
    this.displayTodos();
  },
  changeTodo: function(position, newValue) {
    this.todos[position].todoText = newValue;
    this.displayTodos();
  },
  deleteTodo: function(position) {
    this.todos.splice(position, 1);
    this.displayTodos();
  },
  todoList.togleCompleted should change the completed property
    toggleCompleted: function(position) {
      var todo = this.todos[position];
      todo.completed = !todo.completed
      this.displayTodos();
    }
};

X. Version 5 - Loops of Logic

The for loop:
i = 0               // initialization - make a variable to keep track of how many you wanna do something
Say "hey" if i < 3  // Condition - you have that kinda condition if this keep going if its not stop
Increase i by 1     // final-expression - this will happen after each round

0 "hey"
1 "hey"
2 "hey"
3 stop

for (initialization; condition; final-expression) {
  console.log('hey');
}

for (var i = 0; i < 3; i = i + 1 ) {
  console.log('hey');
}

// i = i + 1;
// i = i++;
// the same but increment is so common that we made a javascript code of i++

for (var i = 0; i < 3; i++ ) {
  console.log('hey');
}

=> hey
hey
hey

for (var i = 0; i <= 3; i++) {
  console.log(i);
}

=> 1
2
3

for (var i = 10; i >= 0; i--) {
  console.log(i);
}

=> 10
9
8
7
6
5
4
3
2
1
0

for (var i = 0; i <= 10; i = i + 2) {
  console.log(i);
}

=> 0
2
4
6
8
10

Looping over arrays:

for (var i = 0; i < 3; i++ ) {
  console.log('hey');
}

var testArray = ['item 1', 'item 2', 'item 3'];

testArray[0];
=> 'item 1'
testArray[1];
=> 'item 2'
testArray[2];
=> 'item 3'

var testArray = ['item 1', 'item 2', 'item 3'];

for (var i = 0; i < 3; i++ ) {
  console.log(testArray[i]);
}

=> item 1
item 2
item 3

var testArray = ['item 1', 'item 2', 'item 3'];

testArray.push('item 4');

for (var i = 0; i < 3; i++ ) {
  console.log(testArray[i]);
}

=> item 1
item 2
item 3 
// will not print the item 4 because the condition stops at 3

var testArray = ['item 1', 'item 2', 'item 3'];

testArray.push('item 4');

for (var i = 0; i < testArray.length; i++ ) {
  console.log(testArray[i]);
}

=> item 1
item 2
item 3
item 4 // prints now the item 4 because using .length it makes it dynamic


Requirements:
1. .displayTodos should show .todoText
2. .displayTodos should tell you if .todos is empty
3. .displayTodos should show .completed

var todoList = {
  todos: [],
  displayTodos: function() {
    // .displayTodos should tell you if .todos is empty
    if (this.todos.length === 0) {
      console.log('Your todo list is empty');
    }
    else {
      // .displayTodos should show .todoText
      console.log('My todos:');
      for (var i = 0; i < this.todos.length; i++) {
        console.log(this.todos[i].todoText);
        // .displayTodos should show .completed
        if (this.todos[i].completed === true) {
          console.log('(X)', this.todos[i].todoText);
        }
        else {
          console.log('( )', this.todos[i].todoText);
        }
      }
    }
  },
  addTodo: function(todoText) {
    this.todos.push({
      todoText: todoText,
      completed: false
    });
    this.displayTodos();
  },
  changeTodo: function(position, newValue) {
    this.todos[position].todoText = newValue;
    this.displayTodos();
  },
  deleteTodo: function(position) {
    this.todos.splice(position, 1);
    this.displayTodos();
  },
  toggleCompleted: function(position) {
    var todo = this.todos[position];
    todo.completed = !todo.completed;
    this.displayTodos();
  }
};

// .displayTodos should show .completed
(X) item 1
( ) item 2
( ) item 3

Use plunker to test the code

XI. Version 6 - Thinking In Code
Biggest feature: toggle all todos to complete
todomvc.com/examples/vanillajs/ - play around the app

Requirements:
1. .toggleAll: If everything's true, make everything false
2. .toggleAll: Otherwise make everything true.

var todoList = {
  todos: [],
  displayTodos: function() {
    // .displayTodos should tell you if .todos is empty
    if (this.todos.length === 0) {
      console.log('Your todo list is empty');
    }
    else {
      // .displayTodos should show .todoText
      console.log('My todos:');
      for (var i = 0; i < this.todos.length; i++) {
        console.log(this.todos[i].todoText);
        // .displayTodos should show .completed
        if (this.todos[i].completed === true) {
          console.log('(X)', this.todos[i].todoText);
        }
        else {
          console.log('( )', this.todos[i].todoText);
        }
      }
    }
  },
  addTodo: function(todoText) {
    this.todos.push({
      todoText: todoText,
      completed: false
    });
    this.displayTodos();
  },
  changeTodo: function(position, newValue) {
    this.todos[position].todoText = newValue;
    this.displayTodos();
  },
  deleteTodo: function(position) {
    this.todos.splice(position, 1);
    this.displayTodos();
  },
  toggleCompleted: function(position) {
    var todo = this.todos[position];
    todo.completed = !todo.completed;
    this.displayTodos();
  },
  toggleAll: function() {
    var totalTodos = this.todos.length;
    var completedTodos = 0;

    // Get number of completed todos.
    for (var i = 0; i < totalTodos; i++ ) {
      if (this.todos[i].completed === true ) {
        completedTodos++;
      }
    }

    // Case 1: If everything's true, make everything false
    if (completedTodos === totalTodos) {
      for (var i = 0; i < totalTodos; i++ ) {
        this.todos[i].completed = false;
      }
    }
    // Case 2: Otherwise, make everything true
    else {
       for (var i = 0; i < totalTodos; i++ ) {
        this.todos[i].completed = true;
      }
    }

    this.displayTodos();
  }
};

Test this on plunker

XII. Interlude - Data Types and Comparisons
